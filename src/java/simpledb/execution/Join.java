package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.RecordId;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import static org.junit.Assert.assertNotNull;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    /**
     * predicate: 过滤条件
     * child1: 传入的迭代器，用于获取tuple
     * child2: 传入的迭代器，用于获取tuple
     * td: 表属性描述
     * tuple1: 用于缓存tuple1
     */
    private JoinPredicate predicate;
    private OpIterator child1;
    private OpIterator child2;
    private TupleDesc td;
    private Tuple tuple1; 
    
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.predicate = p;
        this.child1 = child1;
        this.child2 = child2;
        this.td = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
        this.tuple1 = null;
    }

    public JoinPredicate getJoinPredicate() {
        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
    	return child2.getTupleDesc().getFieldName(predicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
    	super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	while (child1.hasNext() || tuple1 != null) {
    		if (tuple1 == null) {
    			tuple1 = child1.next();
    		}
    		while (child2.hasNext()) {
        		Tuple tuple2 = child2.next();
        		if (predicate.filter(tuple1, tuple2)) {
        			Tuple tuple = new Tuple(td);
        			int tup1Length = tuple1.getTupleDesc().numFields();
        			int tup2Length = tuple2.getTupleDesc().numFields();
        			for (int tdIndex = 0; tdIndex < tup1Length + tup2Length; tdIndex ++) {
        				if (tdIndex < tup1Length) {
        					tuple.setField(tdIndex, tuple1.getField(tdIndex));
        					tuple.setRecordId(tuple1.getRecordId());
        				} else {
        					tuple.setField(tdIndex, tuple2.getField(tdIndex - tup1Length));
        					tuple.setRecordId(tuple2.getRecordId());
        				}
        			}
        			if (!child2.hasNext()) {
        				tuple1 = null;
        				child2.rewind();
        			}
        			return tuple;
        		}
    		}
    		tuple1 = null;
    		child2.rewind();
    	}
    	return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] {child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
    	child1 = children[0];
    	child2 = children[1];
    }

}
